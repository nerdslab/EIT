import torch
import numpy as np

##### ENERGY #####
def potential_energy(state):
    '''U=sum_i,j>i G m_i m_j / r_ij'''
    tot_energy = np.zeros((1, 1, state.shape[2]))
    for i in range(state.shape[0]):
        for j in range(i + 1, state.shape[0]):
            r_ij = ((state[i:i + 1, 1:3] - state[j:j + 1, 1:3]) ** 2).sum(1, keepdims=True) ** .5
            m_i = state[i:i + 1, 0:1]
            m_j = state[j:j + 1, 0:1]
    tot_energy += m_i * m_j / r_ij
    U = -tot_energy.sum(0).squeeze()
    return U


def kinetic_energy(state):
    '''T=sum_i .5*m*v^2'''
    energies = .5 * state[:, 0:1] * (state[:, 3:5] ** 2).sum(1, keepdims=True)
    T = energies.sum(0).squeeze()
    return T


def total_energy(state):
    return potential_energy(state) + kinetic_energy(state)

##### updates #####
def get_accelerations(state, epsilon=0):
    # shape of state is [bodies x properties]
    net_accs = []  # [nbodies x 2]
    for i in range(state.shape[0]):  # number of bodies
        other_bodies = np.concatenate([state[:i, :], state[i + 1:, :]], axis=0)
        displacements = other_bodies[:, 1:3] - state[i, 1:3]  # indexes 1:3 -> pxs, pys
        distances = (displacements ** 2).sum(1, keepdims=True) ** 0.5
        masses = other_bodies[:, 0:1]  # index 0 -> mass

        g = 1
        pointwise_accs = g * masses * displacements / (distances ** 3 + epsilon)  # G=1
        net_acc = pointwise_accs.sum(0, keepdims=True)
        net_accs.append(net_acc)
    net_accs = np.concatenate(net_accs, axis=0)
    return net_accs

def update(t, state):
    state = state.reshape(-1, 5)  # [bodies, properties]
    deriv = np.zeros_like(state)
    deriv[:, 1:3] = state[:, 3:5]  # dx, dy = vx, vy
    deriv[:, 3:5] = get_accelerations(state)
    return deriv.reshape(-1)



### permutations
class all_perm(object):
    def __init__(self, init):
        self.data = [init]
        self.perm = []
        self.perm.append(torch.arange(init.shape[0]))

    def check(self, new, perm):
        flag = False
        for i in self.data:
            if torch.equal(i, new):
                flag = True

        if flag is False:
            self.data.append(new)
            self.perm.append(perm.clone())

class perm_expert_4(object):
    # for each permutation, return a label for type and return a label for connection.
    def __init__(self):
        self.label_type = [0]
        self.label_connection = [0]
        self.label_both = [0]

        self.all_possible_perm = [[0, 1, 2, 3], [3, 1, 0, 2], [0, 3, 2, 1], [2, 0, 3, 1],
                                  [3, 2, 1, 0], [2, 1, 3, 0], [1, 0, 2, 3], [2, 0, 1, 3],
                                  [3, 0, 2, 1], [1, 3, 2, 0], [2, 3, 0, 1], [0, 1, 3, 2],
                                  [2, 1, 0, 3], [1, 2, 0, 3], [3, 2, 0, 1], [1, 3, 0, 2],
                                  [1, 0, 3, 2], [1, 2, 3, 0], [2, 3, 1, 0], [0, 2, 3, 1],
                                  [0, 2, 1, 3], [3, 0, 1, 2], [0, 3, 1, 2], [3, 1, 2, 0]]

        # 24 all possible perms for 4

        self.search_for_type()
        self.search_for_connection()
        self.search_for_both()

    def search_for_type(self):
        type_example = torch.Tensor([1, 2, 1, 2])
        type_store = [type_example]

        label_new = 0
        for perm in self.all_possible_perm[1:]:
            type_i = type_example[perm]
            # print(type_i, '\n', type_store, '\n')
            flag, info = self.check_similar(type_i, type_store)
            if flag == False:
                label_new = label_new + 1
                self.label_type.append(label_new)
                type_store.append(type_i)
            else:
                self.label_type.append(info[0])

    def search_for_connection(self):
        type1_example = torch.Tensor([1, 1, 2, 2])
        type2_example = torch.Tensor([2, 2, 1, 1])
        type1_store = [type1_example]
        type2_store = [type2_example]

        label_new = 0
        for perm in self.all_possible_perm[1:]:
            type_1 = type1_example[perm]
            type_2 = type2_example[perm]
            # print(type_i, '\n', type_store, '\n')

            flag1, info1 = self.check_similar(type_1, type1_store)
            flag2, info2 = self.check_similar(type_1, type2_store)
            if (flag1 == False) and (flag2 == False):
                label_new = label_new + 1
                self.label_connection.append(label_new)
                type1_store.append(type_1)
                type2_store.append(type_2)
            else:
                if info1 is None:
                    self.label_connection.append(info2[0])
                else:
                    self.label_connection.append(info1[0])

        # print(type1_store, type2_store)

    def search_for_both(self):
        """this does not make sense"""
        label_example = torch.Tensor([0, 0])
        label_store = [label_example]

        label_id = 0
        for i in range(len(self.all_possible_perm[1:])):
            label_new = torch.Tensor([self.label_type[i+1], self.label_connection[i+1]])
            flag, info = self.check_similar(label_new, label_store)
            if flag == False:
                label_id = label_id + 1
                self.label_both.append(label_id)
                label_store.append(label_new)
            else:
                self.label_both.append(info[0])

    @staticmethod
    def check_similar(list_new, list_whole):
        for i, list_i in enumerate(list_whole):
            if torch.equal(list_new, list_i):
                return True, (i, list_i)
        return False, None

class perm_expert_6(object):
    '''type: 90 class, connection: 10, all: 360'''
    def __init__(self):
        self.label_type = [0]
        self.label_connection = [0]
        self.label_both = [0]

        self.all_possible_perm = [[0, 1, 2, 3, 4, 5], [5, 0, 2, 1, 4, 3], [4, 1, 2, 0, 3, 5], [0, 5, 4, 3, 2, 1],
                                  [2, 4, 0, 5, 1, 3], [5, 2, 4, 1, 3, 0], [4, 1, 0, 3, 5, 2], [0, 4, 2, 5, 1, 3],
                                  [0, 4, 2, 3, 5, 1], [1, 2, 5, 3, 4, 0], [5, 2, 3, 0, 1, 4], [4, 2, 5, 0, 1, 3],
                                  [1, 4, 5, 0, 3, 2], [1, 3, 4, 2, 5, 0], [5, 4, 2, 0, 1, 3], [2, 5, 4, 1, 3, 0],
                                  [2, 0, 3, 1, 5, 4], [5, 4, 1, 0, 2, 3], [5, 2, 0, 1, 3, 4], [2, 4, 1, 3, 0, 5],
                                  [1, 2, 3, 0, 5, 4], [5, 2, 3, 4, 0, 1], [1, 3, 4, 2, 0, 5], [5, 1, 4, 3, 0, 2],
                                  [4, 2, 0, 3, 1, 5], [0, 1, 5, 3, 4, 2], [2, 0, 3, 5, 4, 1], [3, 2, 4, 1, 5, 0],
                                  [4, 2, 5, 0, 3, 1], [0, 5, 3, 4, 2, 1], [5, 0, 3, 1, 2, 4], [4, 5, 1, 3, 0, 2],
                                  [4, 5, 2, 0, 3, 1], [5, 1, 2, 0, 3, 4], [5, 4, 3, 0, 2, 1], [1, 5, 0, 3, 4, 2],
                                  [0, 5, 2, 1, 4, 3], [4, 5, 1, 2, 0, 3], [0, 3, 4, 2, 1, 5], [1, 4, 3, 2, 0, 5],
                                  [3, 1, 5, 0, 2, 4], [4, 1, 5, 3, 0, 2], [5, 1, 4, 2, 0, 3], [3, 2, 4, 5, 1, 0],
                                  [0, 3, 5, 2, 1, 4], [3, 2, 1, 4, 0, 5], [0, 2, 5, 3, 4, 1], [4, 3, 0, 1, 2, 5],
                                  [2, 4, 0, 3, 5, 1], [5, 4, 0, 3, 2, 1], [0, 4, 1, 2, 5, 3], [1, 0, 4, 5, 3, 2],
                                  [3, 5, 2, 1, 4, 0], [0, 5, 1, 4, 2, 3], [0, 3, 5, 1, 2, 4], [4, 1, 3, 5, 2, 0],
                                  [2, 4, 1, 5, 3, 0], [1, 4, 2, 5, 3, 0], [2, 5, 3, 1, 4, 0], [1, 4, 0, 5, 2, 3],
                                  [5, 0, 1, 2, 4, 3], [2, 4, 0, 3, 1, 5], [1, 5, 2, 4, 0, 3], [4, 3, 1, 2, 0, 5],
                                  [2, 0, 1, 4, 5, 3], [2, 1, 0, 4, 3, 5], [0, 1, 3, 5, 2, 4], [1, 3, 2, 4, 5, 0],
                                  [1, 5, 4, 3, 0, 2], [2, 0, 1, 5, 4, 3], [5, 0, 4, 2, 3, 1], [1, 4, 0, 2, 5, 3],
                                  [4, 5, 0, 2, 1, 3], [3, 5, 4, 2, 1, 0], [4, 1, 3, 0, 2, 5], [2, 4, 3, 5, 0, 1],
                                  [1, 2, 5, 0, 4, 3], [3, 2, 0, 5, 1, 4], [1, 4, 0, 2, 3, 5], [3, 0, 2, 4, 1, 5],
                                  [2, 1, 0, 5, 4, 3], [0, 1, 3, 4, 2, 5], [5, 4, 0, 2, 3, 1], [1, 5, 4, 2, 0, 3],
                                  [4, 3, 1, 0, 2, 5], [4, 3, 5, 1, 0, 2], [2, 3, 0, 1, 4, 5], [2, 0, 5, 4, 3, 1],
                                  [5, 0, 4, 1, 3, 2], [1, 0, 5, 2, 4, 3], [0, 2, 1, 4, 3, 5], [0, 3, 2, 5, 4, 1],
                                  [4, 0, 3, 5, 1, 2], [4, 1, 3, 5, 0, 2], [2, 5, 0, 1, 3, 4], [2, 1, 5, 4, 0, 3],
                                  [3, 5, 1, 0, 4, 2], [5, 1, 0, 3, 4, 2], [3, 0, 5, 2, 1, 4], [2, 3, 5, 1, 4, 0],
                                  [0, 3, 1, 4, 2, 5], [0, 1, 4, 3, 2, 5], [5, 0, 4, 2, 1, 3], [4, 0, 3, 1, 2, 5],
                                  [4, 1, 0, 5, 2, 3], [4, 5, 3, 2, 0, 1], [4, 0, 2, 5, 1, 3], [4, 5, 2, 3, 1, 0],
                                  [5, 2, 1, 0, 3, 4], [1, 0, 2, 4, 5, 3], [0, 4, 1, 5, 3, 2], [2, 5, 0, 3, 4, 1],
                                  [2, 5, 0, 3, 1, 4], [3, 5, 2, 4, 1, 0], [5, 4, 1, 2, 0, 3], [2, 1, 5, 4, 3, 0],
                                  [2, 3, 4, 5, 0, 1], [2, 0, 4, 1, 5, 3], [2, 0, 1, 4, 3, 5], [4, 1, 2, 3, 5, 0],
                                  [0, 3, 4, 5, 1, 2], [0, 3, 1, 2, 5, 4], [4, 5, 1, 3, 2, 0], [4, 3, 2, 5, 1, 0],
                                  [4, 2, 3, 1, 5, 0], [3, 1, 2, 0, 5, 4], [0, 5, 2, 1, 3, 4], [1, 0, 3, 4, 2, 5],
                                  [2, 1, 0, 3, 4, 5], [5, 3, 4, 1, 2, 0], [4, 1, 5, 2, 3, 0], [5, 0, 1, 2, 3, 4],
                                  [1, 4, 5, 2, 0, 3], [0, 2, 1, 3, 5, 4], [1, 4, 3, 0, 2, 5], [3, 1, 0, 2, 4, 5],
                                  [1, 4, 3, 5, 0, 2], [5, 4, 2, 3, 1, 0], [0, 5, 3, 1, 4, 2], [2, 3, 0, 1, 5, 4],
                                  [0, 4, 1, 2, 3, 5], [0, 5, 1, 3, 2, 4], [3, 0, 5, 1, 2, 4], [5, 0, 3, 2, 4, 1],
                                  [2, 1, 4, 0, 5, 3], [4, 3, 2, 0, 5, 1], [0, 4, 5, 1, 3, 2], [1, 4, 3, 0, 5, 2],
                                  [3, 5, 0, 1, 4, 2], [3, 0, 4, 5, 2, 1], [4, 0, 1, 2, 5, 3], [5, 2, 1, 3, 0, 4],
                                  [5, 2, 4, 0, 3, 1], [2, 3, 1, 0, 5, 4], [3, 1, 4, 0, 5, 2], [5, 4, 1, 2, 3, 0],
                                  [3, 1, 2, 5, 0, 4], [3, 1, 0, 2, 5, 4], [1, 2, 3, 4, 5, 0], [1, 2, 4, 0, 3, 5],
                                  [3, 5, 0, 4, 2, 1], [5, 2, 4, 3, 1, 0], [1, 3, 4, 0, 5, 2], [4, 3, 2, 1, 0, 5],
                                  [4, 2, 0, 5, 1, 3], [3, 0, 2, 1, 5, 4], [0, 3, 2, 4, 1, 5], [1, 2, 4, 3, 5, 0],
                                  [1, 4, 2, 0, 3, 5], [0, 3, 4, 5, 2, 1], [5, 1, 2, 4, 0, 3], [5, 0, 1, 4, 2, 3],
                                  [5, 4, 1, 0, 3, 2], [5, 4, 1, 3, 2, 0], [4, 3, 0, 1, 5, 2], [2, 4, 1, 5, 0, 3],
                                  [4, 2, 1, 5, 0, 3], [5, 4, 0, 3, 1, 2], [4, 2, 0, 3, 5, 1], [5, 2, 0, 3, 4, 1],
                                  [4, 3, 2, 0, 1, 5], [4, 2, 3, 1, 0, 5], [2, 3, 1, 4, 0, 5], [5, 2, 0, 4, 1, 3],
                                  [2, 0, 1, 3, 5, 4], [2, 3, 1, 4, 5, 0], [5, 2, 4, 0, 1, 3], [5, 0, 4, 1, 2, 3],
                                  [1, 4, 0, 3, 5, 2], [4, 3, 0, 5, 2, 1], [5, 1, 2, 4, 3, 0], [2, 1, 4, 5, 0, 3],
                                  [0, 5, 4, 2, 1, 3], [1, 5, 0, 4, 3, 2], [5, 0, 1, 3, 4, 2], [3, 2, 1, 0, 5, 4],
                                  [2, 0, 3, 5, 1, 4], [3, 2, 4, 1, 0, 5], [4, 1, 5, 0, 2, 3], [1, 0, 4, 2, 3, 5],
                                    [1, 0, 5, 4, 3, 2], [4, 3, 1, 5, 0, 2], [0, 1, 5, 2, 3, 4], [3, 1, 4, 2, 5, 0],
                                    [0, 2, 5, 3, 1, 4], [0, 5, 2, 4, 1, 3], [1, 2, 0, 3, 5, 4], [3, 2, 0, 4, 1, 5],
                                    [0, 2, 3, 1, 5, 4], [0, 3, 5, 1, 4, 2], [3, 2, 0, 1, 4, 5], [3, 1, 5, 4, 2, 0],
                                    [1, 3, 4, 5, 0, 2], [0, 5, 2, 4, 3, 1], [0, 5, 4, 3, 1, 2], [3, 2, 4, 0, 1, 5],
                                    [1, 2, 4, 0, 5, 3], [0, 4, 2, 3, 1, 5], [2, 1, 5, 3, 4, 0], [4, 1, 0, 2, 5, 3],
                                    [2, 0, 5, 3, 1, 4], [5, 1, 4, 3, 2, 0], [4, 5, 0, 1, 2, 3], [5, 3, 4, 0, 2, 1],
                                    [3, 1, 0, 4, 5, 2], [5, 4, 3, 2, 0, 1], [1, 4, 2, 0, 5, 3], [3, 1, 5, 4, 0, 2],
                                    [2, 3, 0, 4, 5, 1], [2, 5, 1, 3, 4, 0], [0, 4, 5, 1, 2, 3], [3, 1, 0, 5, 4, 2],
                                    [4, 2, 5, 3, 0, 1], [2, 3, 1, 5, 4, 0], [1, 2, 4, 5, 0, 3], [2, 4, 1, 0, 5, 3],
                                    [2, 0, 4, 1, 3, 5], [2, 0, 5, 1, 3, 4], [3, 1, 2, 4, 5, 0], [2, 5, 4, 1, 0, 3],
                                    [3, 0, 2, 1, 4, 5], [1, 3, 5, 4, 0, 2], [4, 5, 3, 0, 1, 2], [0, 2, 5, 1, 3, 4],
                                    [3, 4, 2, 1, 5, 0], [2, 0, 3, 1, 4, 5], [5, 3, 1, 2, 0, 4], [4, 2, 1, 0, 5, 3],
                                    [0, 1, 4, 5, 3, 2], [5, 1, 4, 0, 3, 2], [0, 2, 3, 4, 1, 5], [3, 5, 1, 4, 2, 0],
                                    [1, 5, 0, 2, 4, 3], [5, 3, 0, 2, 4, 1], [4, 3, 5, 1, 2, 0], [5, 3, 2, 0, 1, 4],
                                    [3, 0, 2, 5, 1, 4], [5, 1, 3, 4, 2, 0], [0, 1, 4, 2, 3, 5], [2, 4, 3, 0, 5, 1],
                                    [1, 3, 0, 5, 2, 4], [4, 2, 0, 5, 3, 1], [5, 2, 3, 1, 4, 0], [5, 0, 3, 4, 1, 2],
                                    [0, 5, 4, 2, 3, 1], [2, 5, 4, 0, 3, 1], [1, 2, 3, 5, 0, 4], [3, 1, 2, 5, 4, 0],
                                    [4, 0, 2, 1, 5, 3], [5, 0, 1, 3, 2, 4], [2, 3, 4, 1, 5, 0], [2, 1, 0, 4, 5, 3],
                                    [3, 4, 0, 2, 5, 1], [0, 5, 1, 2, 3, 4], [3, 4, 2, 5, 0, 1], [1, 4, 5, 0, 2, 3],
                                    [0, 4, 1, 3, 2, 5], [4, 1, 5, 0, 3, 2], [2, 5, 4, 0, 1, 3], [1, 4, 0, 3, 2, 5],
                                    [5, 4, 2, 1, 3, 0], [3, 5, 0, 2, 4, 1], [0, 5, 1, 3, 4, 2], [4, 0, 1, 3, 5, 2],
                                    [2, 1, 3, 4, 0, 5], [0, 5, 3, 2, 1, 4], [3, 4, 1, 5, 0, 2], [3, 5, 4, 2, 0, 1],
                                    [1, 5, 4, 0, 2, 3], [5, 1, 4, 0, 2, 3], [4, 0, 2, 3, 1, 5], [4, 5, 3, 0, 2, 1],
                                    [0, 2, 3, 5, 1, 4], [1, 0, 5, 4, 2, 3], [2, 3, 1, 5, 0, 4], [1, 2, 4, 5, 3, 0],
                                    [1, 4, 5, 2, 3, 0], [0, 5, 3, 2, 4, 1], [5, 0, 3, 2, 1, 4], [4, 2, 1, 3, 0, 5],
                                    [1, 5, 0, 3, 2, 4], [0, 2, 4, 3, 1, 5], [1, 2, 5, 4, 3, 0], [3, 4, 2, 0, 1, 5],
                                    [5, 3, 0, 1, 2, 4], [0, 1, 2, 4, 5, 3], [0, 1, 4, 2, 5, 3], [2, 5, 1, 4, 0, 3],
                                    [3, 1, 4, 5, 0, 2], [5, 4, 0, 1, 3, 2], [2, 5, 1, 0, 4, 3], [2, 3, 4, 1, 0, 5],
                                    [4, 5, 1, 2, 3, 0], [0, 2, 1, 5, 3, 4], [4, 1, 2, 3, 0, 5], [3, 1, 5, 0, 4, 2],
                                    [5, 1, 3, 4, 0, 2], [2, 0, 4, 3, 1, 5], [0, 3, 5, 2, 4, 1], [3, 2, 1, 0, 4, 5],
                                    [4, 3, 2, 5, 0, 1], [5, 3, 2, 0, 4, 1], [4, 1, 2, 5, 3, 0], [1, 0, 2, 3, 5, 4],
                                    [0, 2, 1, 4, 5, 3], [1, 3, 2, 4, 0, 5], [4, 3, 5, 0, 1, 2], [4, 1, 3, 0, 5, 2],
                                    [5, 4, 2, 1, 0, 3], [0, 3, 4, 2, 5, 1], [0, 1, 5, 4, 3, 2], [2, 1, 3, 0, 5, 4],
                                    [1, 3, 5, 0, 2, 4], [4, 0, 3, 1, 5, 2], [5, 3, 2, 4, 1, 0], [1, 2, 0, 5, 4, 3],
                                    [5, 1, 0, 3, 2, 4], [1, 0, 2, 4, 3, 5], [5, 3, 4, 2, 1, 0], [5, 2, 1, 4, 3, 0],
                                    [0, 5, 1, 4, 3, 2], [4, 2, 3, 0, 5, 1], [2, 5, 3, 4, 0, 1], [4, 0, 1, 3, 2, 5],
                                    [1, 0, 5, 3, 2, 4], [1, 3, 2, 0, 4, 5], [3, 5, 1, 4, 0, 2], [0, 2, 4, 1, 5, 3],
                                    [4, 3, 2, 1, 5, 0], [3, 5, 4, 0, 2, 1], [3, 4, 1, 5, 2, 0], [4, 0, 5, 3, 2, 1],
                                    [0, 5, 3, 4, 1, 2], [5, 1, 3, 2, 4, 0], [1, 0, 2, 5, 3, 4], [3, 4, 5, 0, 1, 2],
                                    [4, 0, 5, 3, 1, 2], [1, 2, 5, 3, 0, 4], [2, 4, 5, 0, 3, 1], [3, 5, 1, 2, 0, 4],
                                    [4, 2, 3, 0, 1, 5], [1, 5, 2, 3, 0, 4], [3, 5, 1, 0, 2, 4], [2, 5, 1, 4, 3, 0],
                                    [4, 1, 0, 3, 2, 5], [0, 2, 5, 1, 4, 3], [1, 5, 4, 2, 3, 0], [2, 0, 4, 3, 5, 1],
                                    [4, 0, 5, 1, 3, 2], [2, 3, 5, 0, 1, 4], [2, 4, 0, 5, 3, 1], [4, 0, 2, 1, 3, 5],
                                    [1, 2, 5, 4, 0, 3], [3, 4, 2, 5, 1, 0], [2, 3, 0, 5, 1, 4], [4, 2, 3, 5, 1, 0],
                                    [5, 0, 4, 3, 2, 1], [4, 3, 5, 2, 1, 0], [4, 2, 3, 5, 0, 1], [2, 4, 3, 0, 1, 5],
                                    [0, 3, 4, 1, 5, 2], [1, 2, 3, 4, 0, 5], [2, 5, 0, 1, 4, 3], [1, 3, 0, 4, 2, 5],
                                    [5, 3, 4, 2, 0, 1], [4, 5, 3, 1, 2, 0], [3, 2, 5, 4, 0, 1], [2, 0, 5, 1, 4, 3],
                                    [5, 3, 1, 0, 2, 4], [5, 2, 0, 1, 4, 3], [4, 0, 1, 5, 3, 2], [1, 5, 4, 3, 2, 0],
                                    [3, 4, 2, 0, 5, 1], [1, 2, 0, 5, 3, 4], [2, 5, 1, 3, 0, 4], [0, 4, 5, 3, 2, 1],
                                    [1, 5, 3, 2, 4, 0], [0, 4, 1, 5, 2, 3], [1, 0, 4, 3, 5, 2], [3, 5, 1, 2, 4, 0],
                                    [5, 3, 0, 4, 2, 1], [2, 4, 3, 1, 5, 0], [1, 5, 3, 4, 0, 2], [2, 5, 3, 0, 1, 4],
                                    [4, 1, 2, 5, 0, 3], [0, 1, 3, 4, 5, 2], [3, 5, 0, 1, 2, 4], [3, 0, 1, 5, 4, 2],
                                    [1, 3, 0, 2, 5, 4], [3, 4, 5, 2, 0, 1], [4, 5, 2, 0, 1, 3], [1, 0, 4, 2, 5, 3],
                                    [4, 2, 1, 0, 3, 5], [0, 3, 2, 4, 5, 1], [5, 2, 0, 3, 1, 4], [2, 3, 4, 0, 1, 5],
                                    [0, 1, 4, 3, 5, 2], [4, 3, 1, 0, 5, 2], [0, 5, 3, 1, 2, 4], [3, 1, 0, 5, 2, 4],
                                    [3, 2, 4, 5, 0, 1], [2, 1, 4, 3, 0, 5], [2, 5, 4, 3, 0, 1], [4, 5, 2, 3, 0, 1],
                                    [5, 3, 0, 2, 1, 4], [5, 2, 0, 4, 3, 1], [2, 1, 5, 0, 3, 4], [3, 0, 2, 4, 5, 1],
                                    [1, 2, 0, 4, 3, 5], [1, 3, 0, 5, 4, 2], [0, 4, 2, 5, 3, 1], [3, 4, 5, 2, 1, 0],
                                    [4, 0, 5, 2, 1, 3], [2, 1, 3, 5, 0, 4], [0, 4, 5, 2, 3, 1], [0, 4, 3, 1, 2, 5],
                                    [1, 3, 5, 2, 0, 4], [2, 1, 0, 3, 5, 4], [2, 5, 3, 0, 4, 1], [3, 0, 4, 2, 5, 1],
                                    [3, 2, 5, 0, 1, 4], [0, 4, 5, 3, 1, 2], [3, 4, 2, 1, 0, 5], [4, 5, 3, 1, 0, 2],
                                    [3, 0, 5, 4, 1, 2], [1, 0, 2, 3, 4, 5], [5, 2, 3, 0, 4, 1], [2, 4, 3, 5, 1, 0],
                                    [5, 3, 1, 2, 4, 0], [1, 2, 0, 3, 4, 5], [3, 4, 5, 1, 2, 0], [5, 3, 1, 0, 4, 2],
                                    [0, 5, 2, 3, 4, 1], [4, 2, 0, 1, 5, 3], [5, 3, 1, 4, 0, 2], [2, 5, 0, 4, 3, 1],
                                    [5, 4, 3, 1, 2, 0], [1, 2, 5, 0, 3, 4], [2, 1, 4, 0, 3, 5], [3, 5, 4, 0, 1, 2],
                                    [2, 0, 3, 4, 5, 1], [0, 2, 1, 3, 4, 5], [2, 4, 1, 0, 3, 5], [0, 2, 4, 5, 1, 3],
                                    [0, 3, 5, 4, 2, 1], [2, 3, 5, 1, 0, 4], [1, 3, 4, 0, 2, 5], [2, 4, 5, 3, 0, 1],
                                    [1, 0, 2, 5, 4, 3], [1, 4, 2, 5, 0, 3], [1, 4, 2, 3, 5, 0], [1, 3, 5, 2, 4, 0],
                                    [1, 5, 3, 0, 2, 4], [5, 1, 0, 2, 3, 4], [4, 2, 1, 3, 5, 0], [0, 4, 3, 1, 5, 2],
                                    [3, 2, 1, 5, 4, 0], [3, 2, 0, 5, 4, 1], [3, 4, 5, 0, 2, 1], [1, 3, 2, 0, 5, 4],
                                    [3, 5, 0, 2, 1, 4], [5, 4, 3, 2, 1, 0], [4, 0, 1, 5, 2, 3], [4, 2, 1, 5, 3, 0],
                                    [5, 1, 2, 3, 0, 4], [5, 2, 4, 3, 0, 1], [0, 3, 4, 1, 2, 5], [2, 1, 4, 5, 3, 0],
                                    [2, 4, 0, 1, 3, 5], [5, 3, 0, 4, 1, 2], [4, 0, 2, 3, 5, 1], [5, 2, 3, 1, 0, 4],
                                    [2, 3, 1, 0, 4, 5], [4, 0, 3, 2, 5, 1], [3, 2, 5, 1, 0, 4], [2, 3, 0, 5, 4, 1],
                                    [2, 5, 3, 4, 1, 0], [0, 2, 4, 5, 3, 1], [3, 2, 4, 0, 5, 1], [2, 0, 4, 5, 1, 3],
                                    [5, 0, 1, 4, 3, 2], [5, 2, 4, 1, 0, 3], [4, 2, 0, 1, 3, 5], [3, 4, 0, 1, 2, 5],
                                    [3, 4, 1, 0, 2, 5], [4, 3, 0, 5, 1, 2], [5, 2, 1, 3, 4, 0], [3, 4, 1, 2, 5, 0],
                                    [4, 0, 5, 1, 2, 3], [5, 2, 1, 0, 4, 3], [1, 2, 3, 5, 4, 0], [0, 1, 5, 4, 2, 3],
                                    [5, 1, 0, 2, 4, 3], [4, 0, 5, 2, 3, 1], [0, 3, 2, 1, 5, 4], [0, 5, 2, 3, 1, 4],
                                    [5, 4, 3, 1, 0, 2], [3, 5, 0, 4, 1, 2], [5, 4, 2, 0, 3, 1], [1, 3, 0, 2, 4, 5],
                                    [3, 2, 5, 0, 4, 1], [3, 1, 0, 4, 2, 5], [1, 4, 3, 2, 5, 0], [0, 4, 3, 5, 1, 2],
                                    [5, 0, 2, 1, 3, 4], [0, 4, 2, 1, 5, 3], [0, 3, 1, 5, 4, 2], [3, 2, 0, 4, 5, 1],
                                    [5, 1, 0, 4, 2, 3], [2, 0, 3, 4, 1, 5], [4, 3, 5, 2, 0, 1], [2, 4, 3, 1, 0, 5],
                                    [1, 5, 2, 0, 4, 3], [5, 0, 4, 3, 1, 2], [1, 0, 3, 5, 4, 2], [0, 4, 3, 5, 2, 1],
                                    [3, 4, 0, 5, 1, 2], [0, 2, 3, 1, 4, 5], [2, 0, 4, 5, 3, 1], [5, 3, 4, 0, 1, 2],
                                    [2, 1, 3, 5, 4, 0], [1, 0, 4, 3, 2, 5], [1, 5, 2, 0, 3, 4], [0, 1, 5, 3, 2, 4],
                                    [1, 5, 0, 2, 3, 4], [1, 4, 5, 3, 0, 2], [0, 2, 1, 5, 4, 3], [1, 3, 5, 4, 2, 0],
                                    [1, 5, 2, 3, 4, 0], [4, 2, 5, 1, 0, 3], [4, 1, 5, 3, 2, 0], [2, 5, 0, 4, 1, 3],
                                    [5, 4, 2, 3, 0, 1], [1, 3, 0, 4, 5, 2], [4, 0, 2, 5, 3, 1], [3, 2, 1, 4, 5, 0],
                                    [4, 1, 2, 0, 5, 3], [5, 0, 2, 3, 4, 1], [1, 5, 4, 0, 3, 2], [3, 0, 5, 2, 4, 1],
                                    [4, 5, 0, 2, 3, 1], [4, 3, 1, 2, 5, 0], [0, 5, 1, 2, 4, 3], [0, 2, 3, 5, 4, 1],
                                    [3, 5, 2, 0, 1, 4], [1, 5, 3, 2, 0, 4], [2, 1, 0, 5, 3, 4], [2, 3, 4, 0, 5, 1],
                                    [3, 0, 5, 4, 2, 1], [3, 0, 4, 1, 2, 5], [3, 0, 1, 2, 4, 5], [5, 3, 2, 4, 0, 1],
                                    [2, 1, 5, 3, 0, 4], [1, 5, 3, 4, 2, 0], [1, 3, 4, 5, 2, 0], [1, 3, 2, 5, 4, 0],
                                    [5, 1, 3, 0, 2, 4], [4, 5, 0, 3, 2, 1], [2, 0, 5, 3, 4, 1], [4, 5, 3, 2, 1, 0],
                                    [5, 1, 0, 4, 3, 2], [2, 0, 1, 3, 4, 5], [5, 4, 3, 0, 1, 2], [5, 1, 3, 0, 4, 2],
                                    [3, 1, 2, 0, 4, 5], [3, 2, 0, 1, 5, 4], [0, 1, 5, 2, 4, 3], [0, 4, 5, 2, 1, 3],
                                    [1, 4, 5, 3, 2, 0], [0, 4, 3, 2, 1, 5], [5, 1, 3, 2, 0, 4], [1, 3, 5, 0, 4, 2],
                                    [2, 3, 5, 4, 1, 0], [0, 2, 5, 4, 3, 1], [1, 0, 3, 2, 5, 4], [0, 2, 4, 3, 5, 1],
                                    [3, 0, 1, 4, 2, 5], [0, 2, 4, 1, 3, 5], [3, 4, 0, 5, 2, 1], [1, 0, 5, 3, 4, 2],
                                    [4, 5, 0, 1, 3, 2], [2, 4, 5, 3, 1, 0], [3, 2, 5, 1, 4, 0], [3, 5, 2, 4, 0, 1],
                                    [3, 0, 4, 1, 5, 2], [5, 3, 0, 1, 4, 2], [0, 1, 3, 2, 4, 5], [3, 1, 4, 5, 2, 0],
                                    [1, 5, 2, 4, 3, 0], [4, 5, 2, 1, 0, 3], [2, 5, 3, 1, 0, 4], [4, 5, 1, 0, 3, 2],
                                    [2, 1, 3, 4, 5, 0], [4, 0, 3, 5, 2, 1], [2, 4, 5, 0, 1, 3], [5, 3, 1, 4, 2, 0],
                                    [1, 0, 4, 5, 2, 3], [3, 2, 1, 5, 0, 4], [0, 2, 3, 4, 5, 1], [2, 4, 1, 3, 5, 0],
                                    [5, 1, 4, 2, 3, 0], [4, 1, 3, 2, 0, 5], [3, 5, 2, 0, 4, 1], [5, 0, 3, 4, 2, 1],
                                    [2, 5, 1, 0, 3, 4], [3, 1, 2, 4, 0, 5], [3, 4, 1, 0, 5, 2], [0, 1, 2, 3, 5, 4],
                                    [5, 0, 2, 4, 3, 1], [2, 1, 3, 0, 4, 5], [3, 0, 2, 5, 4, 1], [0, 5, 4, 1, 3, 2],
                                    [2, 3, 0, 4, 1, 5], [2, 4, 0, 1, 5, 3], [4, 2, 5, 3, 1, 0], [0, 3, 1, 2, 4, 5],
                                    [4, 0, 1, 2, 3, 5], [4, 5, 1, 0, 2, 3], [5, 0, 3, 1, 4, 2], [1, 5, 0, 4, 2, 3],
                                    [5, 3, 4, 1, 0, 2], [3, 0, 4, 5, 1, 2], [1, 0, 3, 5, 2, 4], [4, 3, 0, 2, 5, 1],
                                    [1, 2, 0, 4, 5, 3], [1, 0, 3, 4, 5, 2], [5, 1, 2, 0, 4, 3], [5, 4, 0, 2, 1, 3],
                                    [3, 4, 5, 1, 0, 2], [3, 0, 1, 2, 5, 4], [2, 4, 5, 1, 3, 0], [1, 4, 0, 5, 3, 2],
                                    [4, 3, 5, 0, 2, 1], [5, 3, 2, 1, 4, 0], [0, 5, 4, 1, 2, 3], [3, 5, 4, 1, 2, 0],
                                    [0, 2, 5, 4, 1, 3], [0, 1, 2, 5, 4, 3], [3, 4, 0, 1, 5, 2], [0, 3, 5, 4, 1, 2],
                                    [3, 2, 5, 4, 1, 0], [2, 3, 4, 5, 1, 0], [0, 3, 1, 5, 2, 4], [1, 4, 2, 3, 0, 5],
                                    [0, 1, 2, 4, 3, 5], [3, 0, 1, 5, 2, 4], [2, 0, 5, 4, 1, 3], [1, 2, 3, 0, 4, 5],
                                    [2, 1, 5, 0, 4, 3], [5, 4, 0, 1, 2, 3], [3, 1, 5, 2, 4, 0], [1, 0, 5, 2, 3, 4],
                                    [0, 3, 1, 4, 5, 2], [0, 1, 4, 5, 2, 3], [3, 4, 1, 2, 0, 5], [3, 0, 5, 1, 4, 2],
                                    [3, 1, 5, 2, 0, 4], [0, 1, 2, 5, 3, 4], [0, 4, 2, 1, 3, 5], [2, 0, 1, 5, 3, 4],
                                    [0, 4, 3, 2, 5, 1], [1, 0, 3, 2, 4, 5], [2, 4, 5, 1, 0, 3], [0, 1, 3, 5, 4, 2],
                                    [4, 1, 0, 5, 3, 2], [2, 1, 4, 3, 5, 0], [0, 3, 2, 1, 4, 5], [5, 4, 1, 3, 0, 2],
                                    [1, 5, 3, 0, 4, 2], [4, 1, 3, 2, 5, 0], [3, 4, 0, 2, 1, 5], [5, 2, 1, 4, 0, 3],
                                    [2, 3, 5, 4, 0, 1], [4, 3, 0, 2, 1, 5], [2, 5, 4, 3, 1, 0], [5, 2, 3, 4, 1, 0],
                                    [4, 0, 3, 2, 1, 5], [0, 4, 1, 3, 5, 2], [1, 2, 4, 3, 0, 5], [4, 5, 0, 3, 1, 2],
                                    [3, 5, 2, 1, 0, 4], [3, 0, 4, 2, 1, 5], [5, 0, 2, 3, 1, 4], [4, 1, 0, 2, 3, 5],
                                    [4, 5, 2, 1, 3, 0], [2, 3, 5, 0, 4, 1], [4, 1, 5, 2, 0, 3], [1, 4, 3, 5, 2, 0],
                                    [5, 0, 2, 4, 1, 3], [5, 1, 2, 3, 4, 0], [3, 5, 4, 1, 0, 2], [5, 3, 2, 1, 0, 4],
                                    [4, 3, 1, 5, 2, 0], [3, 0, 1, 4, 5, 2], [0, 1, 3, 2, 5, 4], [3, 1, 4, 0, 2, 5],
                                    [3, 1, 4, 2, 0, 5], [1, 3, 2, 5, 0, 4], [4, 2, 5, 1, 3, 0], [0, 3, 2, 5, 1, 4]]

        # 720 all possible perms for 6

        self.search_for_type()
        self.search_for_connection()
        self.search_for_both()

    def search_for_type(self):
        type_example = torch.Tensor([1, 2, 3, 1, 2, 3])
        type_store = [type_example]

        label_new = 0
        for perm in self.all_possible_perm[1:]:
            type_i = type_example[perm]
            # print(type_i, '\n', type_store, '\n')
            flag, info = self.check_similar(type_i, type_store)
            if flag == False:
                label_new = label_new + 1
                self.label_type.append(label_new)
                type_store.append(type_i)
            else:
                self.label_type.append(info[0])

    def search_for_connection(self):
        type1_example = torch.Tensor([1, 1, 1, 2, 2, 2])
        type2_example = torch.Tensor([2, 2, 2, 1, 1, 1])
        type1_store = [type1_example]
        type2_store = [type2_example]

        label_new = 0
        for perm in self.all_possible_perm[1:]:
            type_1 = type1_example[perm]
            type_2 = type2_example[perm]
            # print(type_i, '\n', type_store, '\n')

            flag1, info1 = self.check_similar(type_1, type1_store)
            flag2, info2 = self.check_similar(type_1, type2_store)
            if (flag1 == False) and (flag2 == False):
                label_new = label_new + 1
                self.label_connection.append(label_new)
                type1_store.append(type_1)
                type2_store.append(type_2)
            else:
                if info1 is None:
                    self.label_connection.append(info2[0])
                else:
                    self.label_connection.append(info1[0])

        # print(type1_store, type2_store)

    def search_for_both(self):
        """this does not make sense"""
        label_example = torch.Tensor([0, 0])
        label_store = [label_example]

        label_id = 0
        for i in range(len(self.all_possible_perm[1:])):
            label_new = torch.Tensor([self.label_type[i+1], self.label_connection[i+1]])
            flag, info = self.check_similar(label_new, label_store)
            if flag == False:
                label_id = label_id + 1
                self.label_both.append(label_id)
                label_store.append(label_new)
            else:
                self.label_both.append(info[0])

    @staticmethod
    def check_similar(list_new, list_whole):
        for i, list_i in enumerate(list_whole):
            if torch.equal(list_new, list_i):
                return True, (i, list_i)
        return False, None

def two_in_four(type='all'):
    # good perm: [[0, 1, 2, 3], [2, 1, 3, 0], [3, 2, 1, 0], [2, 3, 1, 0], [2, 0, 3, 1], [2, 1, 0, 3]]
    # bad perm: [[0, 1, 2, 3], [0, 2, 3, 1], [3, 2, 0, 1], [3, 0, 2, 1], [3, 0, 2, 1], [0, 2, 3, 1]]

    print('Perm type is {}'.format(type))
    if type == 'connection':
        ori_data = torch.Tensor([1, 1, 2, 2])
    elif type == 'type':
        ori_data = torch.Tensor([1, 2, 1, 2])
    elif type == 'all':
        ori_data = torch.Tensor([1, 2, 3, 4])
    else:
        raise NotImplementedError

    all = all_perm(init=ori_data)
    for i in range(10000):
        perm = torch.randperm(4)
        data = ori_data[perm]
        all.check(data, perm)

    # assert len(all.perm) == 6
    print(len(all.perm))

    return [i.tolist() for i in all.perm]


def three_in_six():
    ori_data = torch.Tensor([1, 2, 3, 1, 2, 3])
    # ori_data = torch.Tensor([1, 1, 1, 2, 2, 2])
    ori_data = torch.Tensor([0, 1, 2, 3, 4, 5])

    all = all_perm(init=ori_data)
    for i in range(10000):
        perm = torch.randperm(6)
        data = ori_data[perm]
        all.check(data, perm)

    # print(len(all.perm))
    # assert len(all.perm) == 20

    return [i.tolist() for i in all.perm]


def test():
    exp = perm_expert_4()
    print(exp.label_type)
    print(exp.label_connection)
    print(exp.label_both)
